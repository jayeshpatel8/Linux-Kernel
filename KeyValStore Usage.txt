Linux Kernel Module : RAM-based key-value store (associative array) in the kernelspace:-
 The key-value store will be accessible from the userspace.
 No  in-kernel API to the key-value store.
 API between the kernelspace and userspace is easy to use from the shell scripts.

KeyValStore module supports inserting,search and deletion operation.
Implemented using read and write operation of dev file.
Read() Call is used for searching a inserted key and it's a lock free while Write() operation call is used for Insertion and Deletion of Key 
and its interruptible blocking call.

Key & Value can be of max 8 bytes long integer.


§Insertion:
write(fd,"SET<8 bytes of key><8 bytes of val>",19)

Insertion Return value
-  19 if successful
- -EXFULL. if Max key insertion limit is reached(256) 
- -ERESTARTSYS: if got blocked on lock using down_interruptible and got interrupted 
- -EFAULT: copy_from_user or copy_to_user failed
- -ENOMEM : Dynamic memory allocation is failing
- -ENOMSG or 0. if key or value is longer than 8 byte. or command string is wrong

Allows Max 256 key Insertion currently.

Insertion will use a lock and it will block the other processes which tries to insert/delete the key at the time of insertion.

Max Insertion can be extended, some avl-tree function using recursion so stack size needs to be taken care of.
Max recursion is euql to log(max key supported). For 256 ,it will be 8.

Insertion caller May get suspended(interruptible) :if there is ongoing Insertion/Deletion. It will remain suspended till either Lock becomes free or
SIGNAL has been sent.

On each new key insertion it will look to allocated memorz from ínternal freeNodePool (which holds the free node memory upon successfull key deletion)
and  if freeNodePool is empty then it will allocate using kmalloc().

§Deletion:
write(fd,"DEL<8 bytes of key>",11)
returns 11 if successful else error code

Deletion Return value
-  11 if successful
- -ERESTARTSYS: if got blocked on lock using down_interruptible and got interrupted 
- -EFAULT: copy_from_user or copy_to_user failed
- -ENOMSG or 0. if key or value is longer than 8 byte. or command string is wrong, 

if user tried to delete a key which doesnt exist then this API also returns success without giving specific different code.
Upon successful Deletion if key is exist then it memory will not be free using kfree() but instead it will add to internal freeNodePool,
meaning once key is inserted its memory will remain allocated but upon successful its link will be moved removed from key-value tree.
Complete Memory free will only happen upon module remove from kernel.

§Searching:
read(fd,"<8 bytes of key>",8)
returns 8 if successful else error code

Searching Return value
-  8 if successful
- -ENOKEY key-val is not found in key-val store database
- -EFAULT: copy_from_user or  copy_to_user failed
- -EAGAIN: if key-value database node link is update (upon node right or left roatation only) due to insertion or deletion
           while searching was on going. User may retry.
- 0 if key is longer than 8 byte.  

§Improvment:
Provide the command line option for max supported keys in key-value store data base adding kernel module command line parameter
Return different err_code for key doesnt exist and key deleted for key delete operation by adding one more function argument to deleteKey API
Add support of more data type and large width/variable length data types using hash mapping function.
Usecase specific implementation: time (less frequest insertion)/fast memory / pre-inserted key value store data base
Improve the locking method used among the insert,delete,serach APIs: Performance improve of  Deletion operation by doing lock free Searching operation first and then deletion
Add timout to keys for auto deletion by adding variable holding a timeout value and searching into tree at some regular interval
